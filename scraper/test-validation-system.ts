#!/usr/bin/env bun

/**
 * Script de prueba para demostrar el sistema de validaci√≥n de extracciones
 * 
 * Uso: bun run test-validation-system.ts
 */

import type { GenericDiscount } from "../promos-db/schema";

// Simulaci√≥n de funciones para testing (en producci√≥n vendr√≠an de los archivos reales)
interface ValidationResult {
  confidenceScore: number;
  issues: Array<{
    severity: "low" | "medium" | "high";
    type: string;
    message: string;
    field?: string;
  }>;
  recommendation: "accept" | "review" | "reject";
  reasoning: string;
}

interface ExtractionAlert {
  severity: "low" | "medium" | "high";
  category: string;
  message: string;
  field?: string;
  confidence?: number;
}

// Datos de prueba
const testContent = `
üõí CARREFOUR MAXI - DESCUENTO ESPECIAL

‚ú® 30% de descuento en toda la tienda
üí≥ V√°lido con tarjetas Banco Galicia
üìÖ Vigente hasta fin de mes
üè™ Solo en sucursales f√≠sicas
üí∞ Tope de reintegro: $5.000

* Excluye bebidas alcoh√≥licas y cigarrillos
* No acumulable con otras promociones
* V√°lido solo para clientes Plan Sueldo
`;

const testExtraction: GenericDiscount = {
  title: "30% descuento Carrefour Maxi",
  description: "Descuento especial en toda la tienda",
  discount: {
    type: "porcentaje",
    value: 30
  },
  validFrom: "2024-01-01",
  validUntil: "2024-01-31", // Ambiguo: "fin de mes"
  paymentMethods: [["Banco Galicia"]], 
  restrictions: ["Solo para clientes Plan Sueldo", "No acumulable con otras promociones"],
  excludesProducts: "Bebidas alcoh√≥licas y cigarrillos",
  limits: {
    maxDiscount: 5000,
    explicitlyHasNoLimit: false
  },
  url: "https://carrefour.com.ar",
  membership: ["Plan Sueldo"]
};

const testExtractionAlerts: ExtractionAlert[] = [
  {
    severity: "medium",
    category: "missing_data",
    message: "Fecha de fin ambigua: 'hasta fin de mes' - asumiendo enero",
    field: "validUntil",
    confidence: 80
  },
  {
    severity: "low", 
    category: "uncertainty",
    message: "No se especifica si el Plan Sueldo debe ser de Banco Galicia",
    field: "membership",
    confidence: 65
  }
];

// Simulaciones de las funciones de validaci√≥n
async function simulateValidation(
  content: string,
  discount: GenericDiscount
): Promise<ValidationResult> {
  console.log("üîç Validando extracci√≥n con LLM secundario...");
  
  // Simular delay de API
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  const issues = [];
  let score = 90;
  
  // Verificar fechas
  if (discount.validUntil === "2024-01-31") {
    issues.push({
      severity: "medium" as const,
      type: "date",
      message: "Fecha de vencimiento inferida de texto ambiguo",
      field: "validUntil"
    });
    score -= 10;
  }
  
  // Verificar consistencia de membres√≠a
  if (discount.membership?.includes("Plan Sueldo") && 
      discount.paymentMethods?.[0]?.includes("Banco Galicia")) {
    issues.push({
      severity: "low" as const,
      type: "consistency",
      message: "Relaci√≥n entre Plan Sueldo y Banco Galicia no expl√≠cita",
      field: "membership"
    });
    score -= 5;
  }
  
  let recommendation: "accept" | "review" | "reject" = "accept";
  if (score < 70) recommendation = "reject";
  else if (score < 85 || issues.some(i => i.severity === "medium")) recommendation = "review";
  
  return {
    confidenceScore: score,
    issues,
    recommendation,
    reasoning: `Score: ${score}/100. ${issues.length > 0 ? 'Issues encontrados requieren atenci√≥n.' : 'Extracci√≥n s√≥lida.'}`
  };
}

function processExtractionWithAlerts(alerts: ExtractionAlert[]) {
  console.log("‚ö†Ô∏è  Procesando alertas de extracci√≥n...");
  
  const needsReview = alerts.some(alert => 
    alert.severity === "high" || 
    (alert.severity === "medium" && (alert.confidence || 0) > 75)
  );

  const summary = {
    totalAlerts: alerts.length,
    highSeverity: alerts.filter(a => a.severity === "high").length,
    mediumSeverity: alerts.filter(a => a.severity === "medium").length,
    lowSeverity: alerts.filter(a => a.severity === "low").length,
    needsReview
  };

  return { summary, needsReview };
}

function filterByValidation(
  discount: GenericDiscount,
  validation: ValidationResult,
  alertsNeedReview: boolean,
  options = { minConfidence: 70, allowReview: true }
) {
  console.log("üîÑ Filtrando resultados...");
  
  if (validation.recommendation === "reject" || validation.confidenceScore < options.minConfidence) {
    return { status: "rejected", reason: "Confianza insuficiente o validaci√≥n negativa" };
  }
  
  if (validation.recommendation === "review" || alertsNeedReview) {
    if (options.allowReview) {
      return { status: "needsReview", reason: "Issues detectados requieren revisi√≥n manual" };
    } else {
      return { status: "rejected", reason: "Review requerido pero no permitido en configuraci√≥n" };
    }
  }
  
  return { status: "accepted", reason: "Validaci√≥n exitosa" };
}

// Funci√≥n principal de demostraci√≥n
async function runValidationDemo() {
  console.log("üöÄ DEMO: Sistema de Validaci√≥n de Extracciones LLM\n");
  
  console.log("üìÑ Contenido original:");
  console.log(testContent);
  console.log("\n" + "=".repeat(60) + "\n");
  
  console.log("üìä Descuento extra√≠do:");
  console.log(JSON.stringify(testExtraction, null, 2));
  console.log("\n" + "=".repeat(60) + "\n");
  
  console.log("üö® Alertas durante extracci√≥n:");
  testExtractionAlerts.forEach((alert, i) => {
    console.log(`${i + 1}. [${alert.severity.toUpperCase()}] ${alert.message}`);
    if (alert.field) console.log(`   Campo: ${alert.field}`);
    if (alert.confidence) console.log(`   Confianza: ${alert.confidence}%`);
  });
  console.log("\n" + "=".repeat(60) + "\n");
  
  // Procesar alertas
  const { summary, needsReview } = processExtractionWithAlerts(testExtractionAlerts);
  console.log("üìã Resumen de alertas:");
  console.log(`- Total: ${summary.totalAlerts}`);
  console.log(`- High: ${summary.highSeverity}, Medium: ${summary.mediumSeverity}, Low: ${summary.lowSeverity}`);
  console.log(`- Requiere revisi√≥n: ${needsReview ? "S√ç" : "NO"}`);
  console.log("\n" + "=".repeat(60) + "\n");
  
  // Validaci√≥n post-extracci√≥n
  const validation = await simulateValidation(testContent, testExtraction);
  
  console.log("üîç Resultado de validaci√≥n:");
  console.log(`- Confianza: ${validation.confidenceScore}/100`);
  console.log(`- Recomendaci√≥n: ${validation.recommendation.toUpperCase()}`);
  console.log(`- Razonamiento: ${validation.reasoning}`);
  
  if (validation.issues.length > 0) {
    console.log("- Issues encontrados:");
    validation.issues.forEach((issue, i) => {
      console.log(`  ${i + 1}. [${issue.severity.toUpperCase()}] ${issue.message}`);
    });
  }
  console.log("\n" + "=".repeat(60) + "\n");
  
  // Filtrado final
  console.log("üéØ Decisiones finales:\n");
  
  const scenarios = [
    { name: "Conservador", config: { minConfidence: 85, allowReview: false } },
    { name: "Balanceado", config: { minConfidence: 70, allowReview: true } },
    { name: "Permisivo", config: { minConfidence: 50, allowReview: true } }
  ];
  
  scenarios.forEach(scenario => {
    const result = filterByValidation(testExtraction, validation, needsReview, scenario.config);
    console.log(`${scenario.name} (minConf: ${scenario.config.minConfidence}, allowReview: ${scenario.config.allowReview}):`);
    console.log(`  ‚Üí Status: ${result.status.toUpperCase()}`);
    console.log(`  ‚Üí Raz√≥n: ${result.reason}`);
    console.log();
  });
  
  console.log("=".repeat(60));
  console.log("‚úÖ Demo completado!");
  console.log("\nüí° En producci√≥n:");
  console.log("- Los descuentos 'accepted' se guardar√≠an en la base de datos");
  console.log("- Los 'needsReview' se enviar√≠an a una cola de revisi√≥n manual");
  console.log("- Los 'rejected' se logear√≠an para an√°lisis posterior");
  console.log("- Las m√©tricas se enviar√≠an a un sistema de monitoreo");
}

// Ejecutar demo al importar directamente
// Para ejecutar: bun run test-validation-system.ts

export { runValidationDemo };