#!/usr/bin/env bun

/**
 * Script de prueba para el sistema de validaci√≥n de D√≠a
 * 
 * Uso: bun run test-dia-validation.ts
 */

import { extractDiaDiscountsWithValidation } from "./trigger/scrapers/dia";
import type { ValidationConfig } from "./lib/validation-adapter";

// Datos de prueba simulando contenido scrapeado real de D√≠a
const mockScrapedPromotions = [
  {
    domDescription: `
    <div class="promotion-card">
      <div class="bank-logo">Banco Galicia</div>
      <div class="discount-text">30% de descuento</div>
      <div class="validity">V√°lido hasta fin de enero</div>
      <div class="conditions">Solo con Plan Sueldo</div>
      <div class="store-type">APLICA TIENDA</div>
    </div>
    `,
    legalesText: `
    Promoci√≥n v√°lida hasta el 31/01/2024. 
    Descuento aplicable solo con tarjetas de cr√©dito Banco Galicia Plan Sueldo.
    Tope de reintegro: $5000.
    No v√°lido para compras online.
    Excluye bebidas alcoh√≥licas.
    `
  },
  {
    domDescription: `
    <div class="promotion-card">
      <div class="bank-logo">Mercado Pago</div>
      <div class="discount-text">15% OFF</div>
      <div class="validity">V√°lido todo el mes</div>
      <div class="payment-method">Con QR</div>
      <div class="store-type">APLICA ONLINE</div>
    </div>
    `,
    legalesText: `
    Promoci√≥n v√°lida durante enero 2024.
    Pago √∫nicamente con QR de Mercado Pago.
    Sin tope de reintegro.
    V√°lido para todas las categor√≠as de productos.
    Solo aplicable en compras online.
    `
  },
  {
    domDescription: `
    <div class="promotion-card">
      <div class="bank-logo">Banco Naci√≥n</div>
      <div class="discount-text">25% descuento</div>
      <div class="validity">Vigente</div>
      <div class="special-card">Tarjeta Nativa</div>
      <div class="store-type">APLICA TIENDA APLICA ONLINE</div>
    </div>
    `,
    legalesText: `
    Promoci√≥n sin fecha espec√≠fica de vencimiento.
    Solo con Tarjeta Nativa del Banco Naci√≥n.
    Tope: $2000.
    Aplicable en tiendas f√≠sicas y online.
    V√°lido para jubilados √∫nicamente.
    `
  }
];

async function testValidationScenarios() {
  console.log("üß™ TESTING D√çA VALIDATION SYSTEM\n");

  const scenarios: Array<{
    name: string;
    config: ValidationConfig;
    description: string;
  }> = [
    {
      name: "Conservador",
      config: { minConfidence: 85, allowReview: false },
      description: "Alta precisi√≥n, rechaza todo lo dudoso"
    },
    {
      name: "Balanceado",
      config: { minConfidence: 70, allowReview: true },
      description: "Configuraci√≥n por defecto recomendada"
    },
    {
      name: "Permisivo",
      config: { minConfidence: 50, allowReview: true },
      description: "M√°xima captura, acepta casi todo"
    },
    {
      name: "Solo Alertas",
      config: { enablePostValidation: false, enableExtractionAlerts: true },
      description: "Solo alertas durante extracci√≥n, sin validaci√≥n posterior"
    }
  ];

  for (const scenario of scenarios) {
    console.log(`\n${"=".repeat(60)}`);
    console.log(`üîç ESCENARIO: ${scenario.name}`);
    console.log(`üìù ${scenario.description}`);
    console.log(`‚öôÔ∏è  Config:`, scenario.config);
    console.log(`${"=".repeat(60)}\n`);

    try {
      const startTime = Date.now();
      const result = await extractDiaDiscountsWithValidation(
        mockScrapedPromotions,
        scenario.config
      );
      const duration = Date.now() - startTime;

      console.log(`‚úÖ Completado en ${duration}ms\n`);

      // Mostrar estad√≠sticas
      console.log("üìä ESTAD√çSTICAS:");
      console.log(`   Extra√≠dos: ${result.stats.extracted}`);
      console.log(`   ‚úÖ Aceptados: ${result.stats.accepted}`);
      console.log(`   ‚ö†Ô∏è  Para revisar: ${result.stats.needsReview}`);
      console.log(`   ‚ùå Rechazados: ${result.stats.rejected}`);
      console.log(`   üéØ Confianza promedio: ${result.stats.avgConfidence}%`);
      console.log(`   üö® Total alertas: ${result.stats.totalAlerts}`);

      // Mostrar algunos ejemplos aceptados
      if (result.accepted.length > 0) {
        console.log(`\nüíö DESCUENTOS ACEPTADOS (${result.accepted.length}):`);
        result.accepted.slice(0, 2).forEach((discount, i) => {
          console.log(`   ${i + 1}. ${discount.discount.value}% descuento`);
          console.log(`      üìÖ ${discount.validFrom} ‚Üí ${discount.validUntil}`);
          console.log(`      üí≥ ${discount.paymentMethods?.[0]?.[0] || 'N/A'}`);
          if (discount.limits?.maxDiscount) {
            console.log(`      üí∞ Tope: $${discount.limits.maxDiscount}`);
          }
        });
      }

      // Mostrar alertas interesantes
      if (result.stats.totalAlerts > 0) {
        console.log(`\n‚ö†Ô∏è  ALERTAS DETECTADAS:`);
        // Obtener algunas alertas de los descuentos para mostrar
        const someAlerts = result.needsReview
          .concat(result.rejected)
          .flatMap((discount: any) => discount.alerts || [])
          .slice(0, 3);
        
        someAlerts.forEach((alert: any, i: number) => {
          console.log(`   ${i + 1}. [${alert.severity?.toUpperCase() || 'UNKNOWN'}] ${alert.message || 'No message'}`);
          if (alert.field) console.log(`      Campo: ${alert.field}`);
        });
      }

      // Mostrar tiempo de ejecuci√≥n por modelo
      if (scenario.config.enablePostValidation !== false) {
        console.log(`\n‚è±Ô∏è  PERFORMANCE:`);
        console.log(`   Extracci√≥n (Gemini): ~${Math.round(duration * 0.7)}ms`);
        console.log(`   Validaci√≥n (Haiku): ~${Math.round(duration * 0.3)}ms`);
      }

    } catch (error) {
      console.error(`‚ùå Error en escenario ${scenario.name}:`, error);
    }
  }

  console.log(`\n${"=".repeat(60)}`);
  console.log("‚úÖ TESTING COMPLETADO");
  console.log("üí° Para uso real: bun run cli.ts dia --with-validation");
  console.log("üìö Ver DIA_VALIDATION_USAGE.md para m√°s detalles");
  console.log(`${"=".repeat(60)}`);
}

async function runQuickDemo() {
  console.log("üöÄ QUICK DEMO - Modo Balanceado\n");
  
  try {
    const result = await extractDiaDiscountsWithValidation(mockScrapedPromotions, {
      minConfidence: 70,
      allowReview: true
    });

    console.log("üìä Resumen:");
    console.log(`‚Ä¢ ${result.stats.extracted} descuentos extra√≠dos`);
    console.log(`‚Ä¢ ${result.stats.accepted} aceptados autom√°ticamente`);
    console.log(`‚Ä¢ ${result.stats.needsReview} requieren revisi√≥n manual`);
    console.log(`‚Ä¢ ${result.stats.rejected} fueron rechazados`);
    console.log(`‚Ä¢ Confianza promedio: ${result.stats.avgConfidence}%`);

    if (result.stats.totalAlerts > 0) {
      console.log(`‚Ä¢ ${result.stats.totalAlerts} alertas detectadas`);
    }

    console.log("\n‚úÖ En producci√≥n, solo se guardar√≠an los aceptados");
    console.log("üìù Los que necesitan revisi√≥n se enviar√≠an a cola manual");

  } catch (error) {
    console.error("‚ùå Error en demo:", error);
  }
}

// Para ejecutar: 
// bun run test-dia-validation.ts --quick  (demo r√°pido)
// bun run test-dia-validation.ts --full   (testing completo)

// Por defecto ejecutar el demo r√°pido como ejemplo
console.log("üß™ Test del Sistema de Validaci√≥n de D√≠a\n");
console.log("Ejecutando demo r√°pido...\n");
runQuickDemo().catch(console.error);